scrape_data:
  description: >
    Use the Web Scraper Tool to fetch active prediction markets and their
    outcome prices from sites like Polymarket and Kalshi.
    Handle infinite scrolling or dynamic rendering where required.
    Selectors may differ by site (e.g., Polymarket cards, Kalshi market tiles).
    For each market, extract:
      - contract/product name
      - all available outcomes (Yes/No or multiple options) with prices
  agent: data_collector
  expected_output: >
    JSON list of objects, each with:
      - site (string)
      - product_name (string)
      - outcomes (dict of {outcome: price/percentage})
      - timestamp (ISO 8601 UTC)

identify_products:
  description: >
    Compare scraped products across sites to identify contracts
    referring to the same real-world event.
    Normalize product naming (case-insensitive, remove punctuation/dates).
    Use fuzzy matching to group near-duplicates.
    Assign a confidence score (0–1) for the match quality.
  agent: product_identifier
  expected_output: >
    JSON array of unified products with fields:
      - product (normalized string)
      - matches (list of {site, product_name, outcomes})
      - confidence (float 0–1)

organize_data:
  description: >
    Merge the unified product data into a structured CSV for analysis.
    Each row corresponds to one normalized product.
    Include outcome prices from each site as separate columns
    (e.g., Kalshi Yes, Kalshi No, Polymarket Yes, Polymarket No).
    Confidence reflects the alignment strength across sources.
  agent: data_organizer
  expected_output: >
    A CSV string like:
    Product,Polymarket Yes,Polymarket No,Kalshi Yes,Kalshi No,Confidence
    "NYC Mayoral Race Winner?",0.68,0.32,0.72,0.28,0.9
